@page "/TSP"
@inject HttpClient Http

<h1>Travelling Salesmen Problem</h1>


@if(tspSpec == null)
{
    <p><em>Loading...</em></p>
}

else
{
<form>
    <label>
        TSP Specification:
        <select class="form-control" @onchange="TSPSpecSelected">
            @foreach (var spec in tspSpec)
            {
                <option>@spec.Name</option>
            }
        </select>
        <InputCheckbox></InputCheckbox>
    </label>

    <label>
        <input type="checkbox" @bind= "showOptimalTour" />
        Show optimal Tour
    </label>
    
</form>

    <BECanvas @ref="scene" Width ="500" Height ="500"></BECanvas>
}

@code {
    WeatherForecast[] forecasts;
    TSPSolving[] tspSpec;
    TSPSolving selectedTSPSpec;
    bool showOptimalTour = true;





    public class SerializableLocation
    {
        public double X { get; set; }
        public double Y { get; set; }

        public static Location ToDomain(SerializableLocation location)
        {
            return new Location(location.X, location.Y);
        }

        public override string ToString()
        {
            return $"({X}, {Y})";
        }
    }

    public class SerializableTSPSpec
    {
        public string Name { get; set; }
        public int[] OptimalTour { get; set; }
        public SerializableLocation[] Cities { get; set; }

        public static TSPSolving ToDomain(SerializableTSPSpec spec)
        {
            return new TSPSolving(spec.Name, spec.OptimalTour, spec.Cities.Select(SerializableLocation.ToDomain).ToList());
        }

        public override string ToString()
        {
            var coordinates = string.Join(" ,", (IEnumerable<SerializableLocation>)Cities);
            return $"{Name} ({Cities.Length}cities): ({coordinates})";
        }


    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);


    }

    protected override async Task OnInitializedAsync()
    {
        var ts = await Http.GetJsonAsync<SerializableTSPSpec[]>("sample-data/tspspecs.json");
        tspSpec=ts.Select(SerializableTSPSpec.ToDomain).OrderBy(spec=>spec.Cities.Count).ToArray();
        selectedTSPSpec = tspSpec.FirstOrDefault();
        foreach (TSPSolving t in tspSpec)
        {
            Console.WriteLine(t.ToString());
        }
    }

    private void TSPSpecSelected(ChangeEventArgs e)
    {
        var specName = (string)e.Value;
        Console.WriteLine($"Selected spec: {specName}");
        selectedTSPSpec = tspSpec.Single(tspSpec => tspSpec.Name == specName);

    }

    BECanvasComponent scene;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(scene == null)
        {
            return;
        }

        var context = await scene.CreateCanvas2DAsync();
        await context.ClearRectAsync(0, 0, scene.Width, scene.Height);

        if(selectedTSPSpec == null)
        {
            return;
        }

        var minX = selectedTSPSpec.Cities.Select(location => location.X).Min();
        var maxX = selectedTSPSpec.Cities.Select(location => location.X).Max();
        var minY = selectedTSPSpec.Cities.Select(location => location.Y).Min();
        var maxY = selectedTSPSpec.Cities.Select(location => location.Y).Max();

        Location GetSceneCoordinates(Location city)
        {

            const int padding = 10;

            var xRatio = (scene.Width - 2 * padding) / (maxX - minX);
            var yRatio = (scene.Height - 2 * padding) / (maxY - minY);
            var x = (city.X - minX) * xRatio + padding;
            var y = (city.Y - minY) * yRatio + padding;
            return new Location(x, y);
        }



        async Task DrawTour(string color, IReadOnlyList<int> tour)
        {
            if(tour.Count == 0)
            {
                return;
            }

            await context.SetStrokeStyleAsync(color);
            await context.BeginBatchAsync();

            var coordinates = selectedTSPSpec.Cities.Select(GetSceneCoordinates).ToArray();

            var startCoordinate = selectedTSPSpec.Cities[tour[0] - 1];
            await context.MoveToAsync(startCoordinate.X, startCoordinate.Y);
            foreach(var cityIndex in tour.Skip(1))
            {
                var coordinate = coordinates[cityIndex-1];
                await context.LineToAsync(coordinate.X, coordinate.Y);
            }

            await context.ClosePathAsync();
            
            await context.StrokeAsync();
        }


        await DrawTour("lime", selectedTSPSpec.Optimaltour);

        foreach(var city in selectedTSPSpec.Cities.Select(GetSceneCoordinates))
        {
            await context.BeginBatchAsync();
            await context.ArcAsync(city.X, city.Y, 2, 0, 2 * Math.PI);
            await context.FillAsync();

        }


    }



}

